第一章 java JDBC
学习目标
  >连接数据库
  >>1. 导包
    maven方式
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>5.1.17</version>
    </dependency>

  >>2. 连接步骤
    package com.xiongcz.jdbc.connection;
    import org.apache.log4j.Logger;
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;
    import java.sql.Statement;
    public class MysqlConnection {
      static Logger log = Logger.getLogger(MysqlConnection.class);

      //使用jcbc连接mysql
      public static void main (String[] args){
          Connection connection=null;
          Statement statement=null;

          try {
              //1. 注册驱动
              Class.forName("com.mysql.jdbc.Driver");

              //2. 获取数据库连接
              connection = DriverManager.getConnection(
                      "jdbc:mysql://localhost:3306/stc",
                      "root",
                      "mysql"
              );

              //3. 创建会话
              statement = connection.createStatement();

              //4. 执行数据库操作
              statement.execute("CREATE TABLE students (id INT ,name CHARACTER )");

          } catch (ClassNotFoundException e) {
              log.error("jdbc drivier not found");
              e.printStackTrace();
          }catch (SQLException e) {
              log.error("数据库连接失败"+e.getMessage());
              e.printStackTrace();
          }finally {
              //5. 关闭连接
              if(statement!=null){
                  try {
                      statement.close();
                  } catch (SQLException e) {
                      e.printStackTrace();
                  }
              }

              if(connection!=null){
                  try {
                      connection.close();
                  } catch (SQLException e) {
                      e.printStackTrace();
                  }
              }
          }
      }
    }

  >>3. 连接方式
  3.1 DriverManager方式
    public static Connection getConnection() throws SQLException {
      conn = DriverManager.getConnection(url, username, password);
      return conn;
    }

  3.2 DataSource方式
    使用mysql厂商提供的MysqlDatasource
    public class DataSourceConnection {
      static Logger log = Logger.getLogger(DataSourceConnection.class);

      //使用jcbc连接mysql
      public static void main (String[] args){
          Connection connection=null;
          Statement statement=null;

          try {
              MysqlDataSource dataSource = new MysqlDataSource();
              dataSource.setUrl("jdbc:mysql://localhost:3306/stc");
              dataSource.setUser("root");
              dataSource.setPassword("mysql");

              connection= dataSource.getConnection();
              //3. 创建会话
              statement = connection.createStatement();

              //4. 执行数据库操作
              statement.execute("INSERT INTO students (id, name) VALUES (3,'ab')");

          /*} catch (ClassNotFoundException e) {
              log.error("jdbc drivier not found");
              e.printStackTrace();
          */}catch (SQLException e) {
              log.error("数据库连接失败"+e.getMessage());
              e.printStackTrace();
          }finally {
              //5. 关闭连接
              if(statement!=null){
                  try {
                      statement.close();
                  } catch (SQLException e) {
                      e.printStackTrace();
                  }
              }

              if(connection!=null){
                  try {
                      connection.close();
                  } catch (SQLException e) {
                      e.printStackTrace();
                  }
              }
          }
      }
    }

  3.3 使用c3p0
    public class C3p0Connection {
        static Logger log = Logger.getLogger(DataSourceConnection.class);

        //使用jcbc连接mysql
        public static void main (String[] args){
            Connection connection=null;
            Statement statement=null;

            try {
                /*MysqlDataSource dataSource = new MysqlDataSource();
                dataSource.setUrl("jdbc:mysql://localhost:3306/stc");
                dataSource.setUser("root");
                dataSource.setPassword("mysql");*/
                ComboPooledDataSource dataSource = new ComboPooledDataSource();
                dataSource.setDriverClass("com.mysql.jdbc.Driver");
                dataSource.setJdbcUrl("jdbc:mysql://localhost:3306/stc");
                dataSource.setUser("root");
                dataSource.setPassword("mysql");

                connection= dataSource.getConnection();
                //3. 创建会话
                statement = connection.createStatement();

                //4. 执行数据库操作
                statement.execute("INSERT INTO students (id, name) VALUES (4,'b')");

            /*} catch (ClassNotFoundException e) {
                log.error("jdbc drivier not found");
                e.printStackTrace();
            */}catch (SQLException e) {
                log.error("数据库连接失败"+e.getMessage());
                e.printStackTrace();
            } catch (PropertyVetoException e) {
                e.printStackTrace();
            } finally {
                //5. 关闭连接
                if(statement!=null){
                    try {
                        statement.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }

                if(connection!=null){
                    try {
                        connection.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }

  3.4 使用DBCP
    public class DBCPConnection {
        static Logger log = Logger.getLogger(MysqlConnection.class);

        //使用jcbc连接mysql
        public static void main (String[] args){
            Connection connection=null;
            Statement statement=null;
            try {
                BasicDataSource dataSource = new BasicDataSource();
                dataSource.setDriverClassName("com.mysql.jdbc.Driver");
                dataSource.setUrl("jdbc:mysql://localhost:3306/stc");
                dataSource.setUsername("root");
                dataSource.setPassword("mysql");

                connection =dataSource.getConnection();
                //3. 创建会话
                statement = connection.createStatement();

                //4. 执行数据库操作
                statement.execute("INSERT INTO students (id, name) VALUES (5,'c')");

            } /*catch (ClassNotFoundException e) {
                log.error("jdbc drivier not found");
                e.printStackTrace();
            }*/catch (SQLException e) {
                log.error("数据库连接失败"+e.getMessage());
                e.printStackTrace();
            }finally {
                //5. 关闭连接
                if(statement!=null){
                    try {
                        statement.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }

                if(connection!=null){
                    try {
                        connection.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
      }

  >数据库增删改查
    public class StudentDao {
        Statement statement;
        Logger logger = Logger.getLogger(Student.class);

        public void insertStudent(Student student){
            try {
                String sql = "INSERT into students (id, name) VALUES ("+student.getId()+","+"'"+student.getName()+"'"+")";
                logger.info(sql);
                boolean execute = statement.execute(sql);
                ResultSet resultSet = statement.getResultSet();
            } catch (SQLException e) {
                logger.error(e.getMessage());
                e.printStackTrace();
            }
        }

        public void deleteStudentById(int id){
            String sql = "delete from students where id = "+id;
            logger.info(sql);
            try {
                statement.execute(sql);
            } catch (SQLException e) {
                logger.error(e.getMessage());
                e.printStackTrace();
            }
        }

        public void updateStudent(Student student){
            String sql = "update students set name="+"'"+student.getName()+"'"+"where id="+student.getId();
            logger.info(sql);
            try {
                statement.execute(sql);
            } catch (SQLException e) {
                logger.error(e.getMessage());
                e.printStackTrace();
            }
        }

        public ArrayList<Student> queryStudentByid(int id){
            ArrayList<Student> list = new ArrayList<Student>();
            String sql = "select * from students where id="+id;
            logger.info(sql);
            try {
                ResultSet resultSet = statement.executeQuery(sql);
                Student student;
                while(resultSet.next()){
                    student = new Student();
                    student.setId(resultSet.getInt("id"));
                    student.setName(resultSet.getString("name"));
                    list.add(student);
                }
            } catch (SQLException e) {
                logger.error(e.getMessage());
                e.printStackTrace();
            }
            return list;
        }

        public Statement getStatement() {
            return statement;
        }

        public void setStatement(Statement statement) {
            this.statement = statement;
        }
    }

  >数据库事物
    事务的特性：

    1) 原子性（atomicity）：事务是数据库的逻辑工作单位，而且是必须是原子工作单位，
    对于其数据修改，要么全部执行，要么全部不执行。

    2) 一致性（consistency）：事务在完成时，必须是所有的数据都保持一致状态。在相
    关数据库中，所有规则都必须应用于事务的修改，以保持所有数据的完整性。

    3) 隔离性（isolation）：一个事务的执行不能被其他事务所影响。

    4) 持久性（durability）：一个事务一旦提交，事物的操作便永久性的保存在DB中。即
    使此时再执行回滚操作也不能撤消所做的更改。

    事务(Transaction):是并发控制的单元，是用户定义的一个操作序列。这些操作要么都做，
    要么都不做，是一个不可分割的工作单位。通过事务，sql server 能将逻辑相关的一组操作
    绑定在一起，以便服务器 保持数据的完整性。事务通常是以begin transaction开始，
    以commit或rollback结束。Commint表示提交，即提交事务的所有操作。具体地说就是将事务
    中所有对数据的更新写回到磁盘上的物理数据库中去，事务正常结束。Rollback表示回滚，即在
    事务运行的过程中发生了某种故障，事务不能继续进行，系统将事务中对数据库的所有已完成的
    操作全部撤消，滚回到事务开始的状态。

    自动提交事务：每条单独的语句都是一个事务。每个语句后都隐含一个commit。 （默认）

    显式事务：以begin transaction显示开始，以commit或rollback结束。

    隐式事务：当连接以隐式事务模式进行操作时，sql server数据库引擎实例将在提交或回滚
    当前事务后自动启动新事务。无须描述事物的开始，只需提交或回滚每个事务。但每个事务仍
    以commit或rollback显式结束。连接将隐性事务模式设置为打开之后，当数据库引擎实例
    首次执行下列任何语句时，都会自动启动一个隐式事务：alter table，insert，create，
    open ，delete，revoke ，drop，select， fetch ，truncate table，grant，update
    在发出commit或rollback语句之前，该事务将一直保持有效。在第一个事务被提交或回滚之后，
    下次当连接执行以上任何语句时，数据库引擎实例都将自动启动一个新事务。该实例将不断地生
    成隐性事务链，直到隐性事务模式关闭为止。

    Java JDBC事务机制
     首先，我们来看看现有JDBC操作会给我们打来什么重大问题，比如有一个业务：当我们修改
     一个信息后再去查询这个信息，看是这是一个简单的业务，实现起来也非常容易，但当这个业
     务放在多线程高并发的平台下，问题自然就出现了，比如当我们执行了一个修改后，在执行查询
     之前有一个线程也执行了修改语句，这是我们再执行查询，看到的信息就有可能与我们修改的
     不同，为了解决这一问题，我们必须引入JDBC事务机制，其实代码实现上很简单，一下给出一
     个原理实现例子供大家参考：

    private Connection conn = null;
    private PreparedStatement ps = null;
    try {
       conn.setAutoCommit(false);  //将自动提交设置为false
       ps.executeUpdate("修改SQL"); //执行修改操作
       ps.executeQuery("查询SQL");  //执行查询操作
       conn.commit();      //当两个操作成功后手动提交
    } catch (Exception e) {
       conn.rollback();    //一旦其中一个操作出错都将回滚，使两个操作都不成功
       e.printStackTrace();
    }
    与事务相关的理论
    1.事务(Transaction)的四个属性(ACID)
    原子性(Atomic) 对数据的修改要么全部执行，要么全部不执行。
    一致性(Consistent) 在事务执行前后，数据状态保持一致性。
    隔离性(Isolated) 一个事务的处理不能影响另一个事务的处理。
    持续性(Durable) 事务处理结束，其效果在数据库中持久化。

    2.事务并发处理可能引起的问题
    脏读(dirty read) 一个事务读取了另一个事务尚未提交的数据，
    不可重复读(non-repeatable read) 一个事务的操作导致另一个事务前后两次读取到不同的数据
    幻读(phantom read) 一个事务的操作导致另一个事务前后两次查询的结果数据量不同。
    举例：
    事务A、B并发执行时，
    当A事务update后，B事务select读取到A尚未提交的数据，此时A事务rollback，则B读到的数据
    是无效的"脏"数据。
    当B事务select读取数据后，A事务update操作更改B事务select到的数据，此时B事务再次读去该
    数据，发现前后两次的数据不一样。
    当B事务select读取数据后，A事务insert或delete了一条满足A事务的select条件的记录，此时B
    事务再次select，发现查询到前次不存在的记录("幻影")，或者前次的某个记录不见了。

    JDBC的事务支持
    JDBC对事务的支持体现在三个方面：
    1.自动提交模式(Auto-commit mode)
    Connection提供了一个auto-commit的属性来指定事务何时结束。
    a.当auto-commit为true时，当每个独立SQL操作的执行完毕，事务立即自动提交，也就是说每个
    SQL操作都是一个事务。
    一个独立SQL操作什么时候算执行完毕，JDBC规范是这样规定的：
    对数据操作语言(DML，如insert,update,delete)和数据定义语言(如create,drop)，语句一执
    行完就视为执行完毕。
    对select语句，当与它关联的ResultSet对象关闭时，视为执行完毕。
    对存储过程或其他返回多个结果的语句，当与它关联的所有ResultSet对象全部关闭，所有update
    count(update,delete等语句操作影响的行数)和output parameter(存储过程的输出参数)都已
    经获取之后，视为执行完毕。
    b. 当auto-commit为false时，每个事务都必须显示调用commit方法进行提交，或者显示调用
    rollback方法进行回滚。auto-commit默认为true。
    JDBC提供了5种不同的事务隔离级别，在Connection中进行了定义。

    2.事务隔离级别(Transaction Isolation Levels)
    JDBC定义了五种事务隔离级别：
    TRANSACTION_NONE JDBC驱动不支持事务
    TRANSACTION_READ_UNCOMMITTED 允许脏读、不可重复读和幻读。
    TRANSACTION_READ_COMMITTED 禁止脏读，但允许不可重复读和幻读。
    TRANSACTION_REPEATABLE_READ 禁止脏读和不可重复读，单运行幻读。
    TRANSACTION_SERIALIZABLE 禁止脏读、不可重复读和幻读。

    3.保存点(SavePoint)
    JDBC定义了SavePoint接口，提供在一个更细粒度的事务控制机制。当设置了一个保存点后，可以
    rollback到该保存点处的状态，而不是rollback整个事务。
    Connection接口的setSavepoint和releaseSavepoint方法可以设置和释放保存点。

    JDBC规范虽然定义了事务的以上支持行为，但是各个JDBC驱动，数据库厂商对事务的支持程度可能
    各不相同。如果在程序中任意设置，可能得不到想要的效果。为此，JDBC提供了DatabaseMetaData
    接口，提供了一系列JDBC特性支持情况的获取方法。比如，通过
    DatabaseMetaData.supportsTransactionIsolationLevel方法可以判断对事务隔离级别的支持
    情况，通过DatabaseMetaData.supportsSavepoints方法可以判断对保存点的支持情况。

第二章 Hibernate
学习目标
  >环境搭建
  1. 导包
  <dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>5.2.10.Final</version>
  </dependency>
  2. 创建配置文件
  --文件名：hibernate.cfg.xml
  --文件位置：classpath
  --文件模板
    <!DOCTYPE hibernate-configuration PUBLIC
            "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
            "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
    <hibernate-configuration>
        <session-factory name="foo">
            <!--database configuration-->
            <property name="connection.driver_class">com.mysql.jdbc.Driver</property>
            <property name="connection.url">jdbc:mysql://localhost:3306/stc</property>
            <property name="connection.username">root</property>
            <property name="connection.password">mysql</property>

            <!--hibernate setting-->
            <property name="dialect">org.hibernate.dialect.MySQL57InnoDBDialect</property>
            <property name="hibernate.hbm2ddl.auto">update</property>
            <!--<property name="javax.persistence.validation.mode">true</property>-->

            <property name="show_sql">true</property>

            <mapping resource="Student.hbm.xml"></mapping>
            <!--<mapping resource="org/hibernate/test/legacy/Simple.hbm.xml"/>
            <class-cache
                    class="org.hibernate.test.legacy.Simple"
                    region="Simple"
                    usage="read-write"/>-->
        </session-factory>
    </hibernate-configuration>

  3. 创建model类
    package com.xiongcz.hibernate.model;
    public class Student {
        private int id;
        private String name;
        private int age;

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getAge() {
            return age;
        }

        public void setAge(int age) {
            this.age = age;
        }

        @Override
        public String toString() {
            return "Student{" +
                    "id=" + id +
                    ", name='" + name + '\'' +
                    ", age=" + age +
                    '}';
        }
    }

  4. 创建orm映射文件
  --文件名：Student.hbm.xml
  --文件位置：在hibernate中配置
  --文件模板
      <?xml version="1.0" encoding="utf-8"?>
      <!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
              "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
      <hibernate-mapping package="com.xiongcz.hibernate.model">
          <class name="Student" table="student">
              <id name="id" column="id" type="java.lang.Integer">
                  <generator class="native"></generator>
              </id>
              <property name="name" column="name" type="java.lang.String"></property>
              <property name="age" column="age" type="java.lang.Integer"></property>
          </class>
      </hibernate-mapping>
  5. 测试
    @Test
    public void testHibernate(){
        SessionFactory sessionFactory = HibernateUtils.getSessionFactory();
        Session session = sessionFactory.openSession();
        session.save(new Student(1,"xiongcz",21));
        session.close();
        sessionFactory.close();
    }

  >主键生成策略
    identity：使用数据库的自动增长策略，不是所有数据库都支持，比如oracle就不支持。
    sequence：在 DB2，PostgreSQL，Oracle，SAP DB，McKoi 中使用序列（sequence）在使用Oracle数据库时可以使用这一个。
    hilo:使用高低位算法生成主键值。只需要一张额外表，所有的数据都支持。
    native:根据底层数据库的能力选择 identity、sequence 或者 hilo中的一个。
    assigned：手工指定主键值。
    uuid：由Hibernate自动生成UUID并指定为主键值。

  >映射关系配置
  --单向一对一
    Student类
      package com.xiongcz.hibernate.model;
      public class Student {
          private int id;
          private String name;
          private int age;
          private SudentCard sudentCard;

          public int getId() {
              return id;
          }

          public void setId(int id) {
              this.id = id;
          }

          public String getName() {
              return name;
          }

          public void setName(String name) {
              this.name = name;
          }

          public int getAge() {
              return age;
          }

          public void setAge(int age) {
              this.age = age;
          }

          public SudentCard getSudentCard() {
              return sudentCard;
          }

          public void setSudentCard(SudentCard sudentCard) {
              this.sudentCard = sudentCard;
          }

          @Override
          public String toString() {
              return "Student{" +
                      "id=" + id +
                      ", name='" + name + '\'' +
                      ", age=" + age +
                      ", sudentCard=" + sudentCard +
                      '}';
          }
      }

    SudentCard类
      package com.xiongcz.hibernate.model;
      public class SudentCard {
          private int scid;
          private float money;

          @Override
          public String toString() {
              return "SudentCard{" +
                      "scid=" + scid +
                      ", money=" + money +
                      '}';
          }

          public SudentCard(int scid, float money) {
              this.scid = scid;
              this.money = money;
          }

          public SudentCard() {
          }

          public int getScid() {
              return scid;
          }

          public void setScid(int scid) {
              this.scid = scid;
          }

          public float getMoney() {
              return money;
          }

          public void setMoney(float money) {
              this.money = money;
          }
      }

    Student映射文件
      <?xml version="1.0" encoding="utf-8"?>
      <!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
              "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
      <hibernate-mapping package="com.xiongcz.hibernate.model">
          <class name="Student" table="student">
              <id name="id">
                  <generator class="foreign" >
                      <param name="property">sudentCard</param>
                  </generator>
              </id>
              <property name="name" column="name" type="java.lang.String"></property>
              <property name="age" column="age" type="java.lang.Integer"></property>
              <one-to-one name="sudentCard" constrained="true"/>
          </class>
      </hibernate-mapping>

    SudentCard映射文件
      <?xml version="1.0" encoding="utf-8"?>
      <!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
              "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
      <hibernate-mapping package="com.xiongcz.hibernate.model">
          <class name="SudentCard" table="scard">
              <id name="scid" column="scid" type="java.lang.Integer">
                  <generator class="native"></generator>
              </id>
              <property name="money" column="money"/>
          </class>
      </hibernate-mapping>

    测试
      @Test
      public void addStudent(){
          SessionFactory sessionFactory = HibernateUtils.getSessionFactory();
          Session session = sessionFactory.openSession();

          session.beginTransaction();
          SudentCard sudentCard = new SudentCard();
          //sudentCard.setScid();
          sudentCard.setMoney(100);
          Student student = new Student();
          student.setName("changjiang");
          student.setAge(32);
          student.setSudentCard(sudentCard);
          session.save(student);
          session.getTransaction().commit();

          session.close();
          sessionFactory.close();
      }

  --单向多对一
    开始
  --单向一对多

  --单项多对多

  --双向多对多

  --双向多对一

  --双向一对一

  >inverse和cascade
  >集成C3p0
  >HQL
